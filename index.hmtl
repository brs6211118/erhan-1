<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IndieFilms TR — Bağımsız Kısa Filmler</title>
    <meta name="description" content="Türkiye'nin en iyi bağımsız kısa film platformu. Kaliteli, özgün içerikler keşfedin.">
    <meta name="keywords" content="bağımsız film, kısa film, Türk sineması, indie films">
    <meta property="og:title" content="IndieFilms TR — Bağımsız Kısa Filmler">
    <meta property="og:description" content="Türkiye'nin en iyi bağımsız kısa film platformu">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    
    <style>
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --text-primary: #1a1a1a;
            --text-secondary: #666666;
            --accent: #e50914;
            --border: #e1e5e9;
            --shadow: rgba(0,0,0,0.1);
        }

        [data-theme="dark"] {
            --bg-primary: #0f0f0f;
            --bg-secondary: #1a1a1a;
            --text-primary: #ffffff;
            --text-secondary: #b3b3b3;
            --accent: #e50914;
            --border: #333333;
            --shadow: rgba(0,0,0,0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .header {
            background: var(--bg-primary);
            padding: 1rem 0;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: var(--accent);
            text-decoration: none;
        }

        .theme-toggle {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 50px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            color: var(--text-primary);
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .theme-toggle:hover {
            background: var(--accent);
            color: white;
        }

        .search-section {
            padding: 2rem 0;
            background: var(--bg-secondary);
        }

        .search-bar {
            width: 100%;
            max-width: 500px;
            margin: 0 auto 1.5rem;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 1rem 1.5rem;
            border: 1px solid var(--border);
            border-radius: 50px;
            background: var(--bg-primary);
            color: var(--text-primary);
            font-size: 1rem;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--accent);
        }

        .filters {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border);
            border-radius: 25px;
            background: var(--bg-primary);
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .filter-btn:hover,
        .filter-btn.active {
            background: var(--accent);
            color: white;
            border-color: var(--accent);
        }

        .main-content {
            padding: 2rem 0;
            min-height: 50vh;
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .video-card {
            background: var(--bg-secondary);
            border-radius: 12px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid var(--border);
        }

        .video-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px var(--shadow);
        }

        .video-thumbnail {
            width: 100%;
            height: 200px;
            background: linear-gradient(45deg, var(--accent), #ff6b6b);
            position: relative;
            overflow: hidden;
        }

        .thumbnail-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            color: rgba(255,255,255,0.8);
        }

        .play-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 60px;
            height: 60px;
            background: rgba(0,0,0,0.7);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .video-card:hover .play-button {
            opacity: 1;
        }

        .video-info {
            padding: 1.5rem;
        }

        .video-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .video-description {
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin-bottom: 1rem;
            line-height: 1.4;
        }

        .video-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tag {
            background: var(--accent);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
        }

        .video-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }

        .action-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--bg-primary);
            color: var(--accent);
        }

        .action-btn.active {
            color: var(--accent);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 1000;
            padding: 2rem;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--bg-primary);
            border-radius: 12px;
            width: 100%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: var(--bg-secondary);
            color: var(--accent);
        }

        .video-player {
            width: 100%;
            height: 400px;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .user-section {
            background: var(--bg-secondary);
            padding: 2rem 0;
            margin-top: 3rem;
        }

        .user-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 1rem;
        }

        .feature-card {
            background: var(--bg-primary);
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--border);
            text-align: center;
        }

        .feature-icon {
            font-size: 2rem;
            color: var(--accent);
            margin-bottom: 1rem;
        }

        .footer {
            background: var(--bg-secondary);
            padding: 3rem 0 2rem;
            margin-top: 3rem;
            border-top: 1px solid var(--border);
        }

        .readme-section {
            background: var(--bg-primary);
            padding: 2rem;
            border-radius: 12px;
            border: 1px solid var(--border);
            margin-bottom: 2rem;
        }

        .readme-section h3 {
            color: var(--accent);
            margin-bottom: 1rem;
        }

        .steps {
            list-style: none;
            padding-left: 0;
            counter-reset: step-counter;
        }

        .steps li {
            padding: 0.5rem 0;
            position: relative;
            padding-left: 2rem;
        }

        .steps li:before {
            content: counter(step-counter);
            counter-increment: step-counter;
            position: absolute;
            left: 0;
            background: var(--accent);
            color: white;
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
            color: var(--text-secondary);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--border);
            border-top: 3px solid var(--accent);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
            }
            .video-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            .modal { padding: 1rem; }
            .video-player { height: 250px; }
            .filters {
                justify-content: flex-start;
                overflow-x: auto;
                padding-bottom: 0.5rem;
            }
            .filter-btn { white-space: nowrap; }
        }

        @media (max-width: 480px) {
            .container { padding: 0 0.5rem; }
            .logo { font-size: 1.5rem; }
            .video-info { padding: 1rem; }
        }

        button:focus, input:focus, .video-card:focus {
            outline: 2px solid var(--accent);
            outline-offset: 2px;
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="container">
            <div class="header-content">
                <a href="#" class="logo">IndieFilms TR</a>
                <button class="theme-toggle" id="themeToggle">🌙 Koyu Tema</button>
            </div>
        </div>
    </header>

    <section class="search-section">
        <div class="container">
            <div class="search-bar">
                <input type="text" class="search-input" placeholder="Film ara..." id="searchInput">
            </div>
            <div class="filters">
                <button class="filter-btn active" data-filter="all">Tümü</button>
                <button class="filter-btn" data-filter="drama">Kısa Dram</button>
                <button class="filter-btn" data-filter="experimental">Deneysel</button>
                <button class="filter-btn" data-filter="animation">Animasyon</button>
                <button class="filter-btn" data-filter="documentary">Belgesel</button>
                <button class="filter-btn" data-filter="comedy">Komedi</button>
            </div>
        </div>
    </section>

    <main class="main-content">
        <div class="container">
            <div class="video-grid" id="videoGrid"></div>
            <div class="loading" id="loading" style="display: none;">
                <div class="spinner"></div>Videolar yükleniyor...
            </div>
        </div>
    </main>

    <section class="user-section">
        <div class="container">
            <h2 style="text-align: center; margin-bottom: 2rem;">Platform Özellikleri</h2>
            <div class="user-features">
                <div class="feature-card">
                    <div class="feature-icon">❤️</div>
                    <h3>Favori Listesi</h3>
                    <p>Beğendiğiniz filmleri favori listenize ekleyin ve kolayca erişin.</p>
                    <button class="action-btn" style="margin-top: 1rem;"><span>Favoriler</span></button>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📺</div>
                    <h3>İzleme Listesi</h3>
                   <p>Daha sonra izlemek istediğiniz filmleri listenize ekleyin.</p>
                    <button class="action-btn" style="margin-top: 1rem;"><span>İzleme Listesi</span></button>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">👤</div>
                    <h3>Kullanıcı Profili</h3>
                    <p>Kişisel profilinizi oluşturun ve izleme geçmişinizi takip edin.</p>
                    <button class="action-btn" style="margin-top: 1rem;"><span>Profil (Mock)</span></button>
                </div>
            </div>
        </div>
    </section>

    <div class="modal" id="videoModal">
        <div class="modal-content">
            <div class="modal-header">
               <h2 id="modal-title">Film Başlığı</h2>
                <button class="close-btn" id="closeModal">×</button>
            </div>
            <div class="video-player" id="videoPlayer">
                Video oynatıcı burada görünecek - Gerçek videolarınızı ekleyebilirsiniz
            </div>
            <div class="modal-body">
                <p id="modal-description">Film açıklaması burada görünecek.</p>
                <div class="video-actions">
                    <button class="action-btn" id="modalFavorite">❤️ <span>Favorilere Ekle</span></button>
                    <button class="action-btn" id="modalWatchlist">📺 <span>İzleme Listesi</span></button>
                    <button class="action-btn" id="moalShare">🔗 <span>Paylaş</span></button>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        <div class="container">
            <div class="readme-section">
                <h3>GiHub Pages'e Nasıl Yüklenir?</h3>
                <ol class="steps">
                    <li>GitHub hesabınızda yeni bir repository oluşturun</li>
                    <li>Repository'ye bu index.html dosyasını yükleyin</li>
                    <li>Repository Settings > Pages bölümüne gidin</li>
                    <li>Source olarak "Deploy from a branch" seçin</li>
                    <li>Branch olarak "main" veya "master" seçin</li>
                    <li>Save butonuna tıklayın ve sitenizin URL'sini kopyalayın</li>
                </ol>
                <p><strong>KULLANIM:</strong> GitHub repository'ye index.html olarak ekle, Pages aktif et.</p>
            </div>
            <div style="text-align: center; color: var(--text-secondary);">
                <p>&copy; 2024 IndieFilms TR. Tüm hakları saklıdır.</p>
                <p>Bağımsız kısa filmler için profesyonel platform şablonu</p>
            </div>
        </div>
    </footer>

    <script>
        // Video data
        const videosData = [
            {
                id: 1,
                title: "Gecenin Sessizliği",
                description: "Şehrin karanlık sokaklarında geçen psikolojik bir dram. Yalnızlık ve umut arasındaki ince çizgiyi keşfeden etkileyici bir hikaye.",
                tags: ["drama", "psikolojik"],
                category: "drama",
                duration: "12:45",
                thumbnail: "🎬",
                isFavorite: false,
                inWatchlist: false
            },
            {
                id: 2,
                title: "Renklerin Dansı",
                desciption: "Soyut animasyon teknikleriyle yaratılmış görsel bir şölen. Müzik ve renklerin mükemmel uyumu ile büyüleyici bir deneyim.",
                tags: ["animation", "deneysel"],
                category: "animation",
                duration: "08:30",
                thumbnail: "🎨",
                isFavorite: false,
                inWatchlist: false
            },
            {
                id: 3,
               title: "Zaman Kırılması",
                description: "Deneysel anlatım teknikleriyle kurgulanmış bir bilim kurgu hikayesi. Zamanın doğrusal olmayan yapısını sorgulayan cesur bir yaklaşım.",
                tags: ["experimental", "sci-fi"],
                category: "experimental",
                duration: "15:20",
                thumbnail: "🌌",
                isFavorite: true,
                inWatchlist: false
            },
            {
                id: 4,
                title:"Kayıp Anılar",
                description: "Yaşlılık ve hafıza kaybı temasını işleyen dokunaklı bir hikaye. İnsan zihninin karmaşıklığını anlatan duygusal bir yolculuk.",
                tags: ["drama", "aile"],
                category: "drama",
                duration: "18:45",
                thumbnail: "🧠",
                isFavorite: false,
                inWatchlist: true
            },
            {
                id: 5,
                title: "Sokak Müzisyenleri",
                description: "İstanbul'un sokak müzisyenlerini konu alan belgesel tarzı bir film. Sanatın hayatta kalma mücadelesini gözler önüne seriyor.",
                tags: ["documentary", "müzik"],
                category: "documentary",
                duration: "22:10",
                thmbnail: "🎵",
                isFavorite: false,
                inWatchlist: false
            },
            {
                id: 6,
                ttle: "Komşu Kapıları",
                description: "Apartman hayatının komik yanlarını konu alan neşeli bir komedi. Gündelik hayattan kesitlerle güldüren sıcak bir hikaye.",
                tags: ["comedy", "sosyal"],
                category: "comedy",
                duration: "14:15",
                thumbnail: "😄",
                isFavorite: false,
                inWatchlist: false
            }
        ];

        // DOM elements
        const themeToggle = document.getElementById('themeToggle');
        const searchInput = document.getElementById('searchInput');
        const videoGrid = document.getElementById('videoGrid');
        const videoModal = document.getElementById('videoModal');
        const closeModal = document.getElementById('closeModal');
        const modalTitle = document.getElementById('modal-title');
        const modalDescription = document.getElementById('modal-description');
        cost filterBtns = document.querySelectorAll('.filter-btn');
        const loading = document.getElementById('loading');

        // State
        let currentFilter = 'all';
        let searchQuery = '';
        let videos = [...videosData];

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeTheme();
            loadUserData();
            renderVideos();
            setupEventListeners();
        });

        // Theme functions
        function initializeTheme() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeButton(savedTheme);
        }

        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeButton(newTheme);
        }

        function updateThemeButton(theme) {
            themeToggle.textContent = theme === 'dark' ? '☀️ Açık Tema' : '🌙 Koyu Tema';
        }

        // User data functions
        function loadUserData() {
            const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
            const watchlist = JSON.parse(localStorage.getItem('watchlist') || '[]');
           videos.forEach(video => {
                video.isFavorite = favorites.includes(video.id);
                video.inWatchlist = watchlist.includes(video.id);
            });
        }

        function saveUserData() {
            const favorites = videos.filter(v => v.isFavorite).map(v => v.id);
            const watchlist = videos.filter(v => v.inWatchlist).map(v => v.id);
            localStorage.setItem('favorites', JSON.stringify(favorites));
            localStorage.setItem('watchlist', JSON.stringify(watchlist));
        }

        // Video rendering functions
        function renderVideos() {
            showLoading();
            setTimeout(() => {
                const filteredVideos = filterVideos();
                videoGrid.innerHTML = '';
                
                if (filteredVideos.length === 0) {
                    videoGrid.innerHTML = `
                        <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--text-secondary);">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">🎬</div>
                           <h3>Film bulunamadı</h3>
                            <p>Arama kriterlerinize uygun film bulunamadı. Lütfen farklı anahtar kelimeler deneyin.</p>
                        </div>
                    `;
                    hideLoading();
                    return;
                }

                filteredVideos.forEach(video => {
                    const videoCard = createVideoCard(video);
                    videoGrid.appendChild(videoCard);
                });
                
                hideLoading();
            }, 300);
        }

        function createVideoCard(video) {
            const card = document.createElement('div');
            card.className = 'video-card';
            card.setAttribute('tabindex', '0');
            
            card.innerHTML = `
                <div class="video-thumbnail">
                    <div class="thumbnail-placeholder">${video.thumbnail}</div>
                    <div class="play-button">▶</div>
                </div>
                <div class="video-info">
                    <h3 class="video-title">${video.title}</h3>
                    <p class="video-description">${video.description}</p>
                    <div class="video-tags">
                        ${video.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                    </div>
                    <div class="video-actions">
                        <button class="action-btn favorite-btn ${video.isFavorite ? 'active' : ''}" data-id="${video.id}">
                            ❤️ <span>${video.isFavorite ? 'Favorilerde' : 'Favorilere Ekle'}</span>
                        </button>
                        <button class="action-btn watchlist-btn ${video.inWatchlist ? 'active' : ''}" data-id="${video.id}">
                            📺 <span>${video.inWatchlist ? 'Listede' : 'Listeye Ekle'}</span>
                        </button>
                        <span style="color: var(--text-secondary); font-size: 0.9rem;">${video.duration}</span>
                    </div>
                </div>
            `;

            // Add event listeners
            card.addEventListener(click', (e) => {
                if (!e.target.closest('.action-btn')) {
                    openVideoModal(video);
                }
            });

            const favoriteBtn = card.querySelector('.favorite-btn');
            const watchlistBtn = card.querySelector('.watchlist-btn');

            favoriteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleFavorite(video.id);
            });

            watchlistBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleWatchlist(video.id);
            });

            return card;
        }

        function filterVideos() {
            return videos.filter(video => {
                const matchesFilter = currentFilter === 'all' || video.category === currentFilter;
                const matchesSearch = searchQuery === '' || 
                    video.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    video.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                    video.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
                return matchesFilter && matchesSearch;
            });
        }

        // Modal functions
        function openVideoModal(video) {
            modalTitle.textContent = video.title;
            modalDescription.textContent = video.description;
            videoModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function closeVideoModal() {
            videoModal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }

        // User action functions
        function toggleFavorite(videoId) {
            const video = videos.find(v => v.id === videoId);
            if (video) {
                video.isFavorite = !video.isFavorite;
                saveUserData();
                renderVideos();
            }
        }

        function toggleWatchlist(videoId) {
            const video = videos.find(v => v.id === videoId);
            if (video) {
                video.inWatchlist = !video.inWatchlist;
                saveUserData();
                renderVideos();
            }
        }

        // Utility functions
        function showLoading() {
            loading.style.display = 'flex';
        }

        function hideLoading() {
            loading.style.display = 'none';
        }

        // Event listeners setup
        function setupEventListeners() {
            // Theme toggle
            themeToggle.addEventListener('click', toggleTheme);

            // Search input
            searchInput.addEventListener('input', (e) => {
                searchQuery = e.target.value;
                renderVideos();
            });

            // Filter buttons
            filterBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    // Remove active class from all buttons
                    filterBtns.forEach(b => b.classList.remove('active'));
                    // Add active class to clicked button
                    e.target.classList.add('active');
                    // Update current filter
                    currentFilter = e.target.dataset.filter;
                    // Re-render videos
                    renderVideos();
                });
            });

            // Modal close
            closeModal.addEventListener('click', closeVideoModal);

            // Close modal when clicking outside
            videoModal.addEventListener('click', (e) => {
                if (e.target === videoModal) {
                    closeVideoModal();
                }
            });

            // Keyboard navigation
