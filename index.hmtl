<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IndieFilms TR — Bağımsız Kısa Filmler</title>
    
    <!-- SEO Meta Tags -->
    <meta name="description" content="Türkiye'nin en iyi bağımsız kısa film platformu. Yaratıcı ve özgün kısa filmleri keşfedin.">
    <meta name="keywords" content="kısa film, bağımsız film, indie film, türk sineması, film platformu">
    <meta name="author" content="IndieFilms TR">
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="IndieFilms TR — Bağımsız Kısa Filmler">
    <meta property="og:description" content="Türkiye'nin en iyi bağımsız kısa film platformu. Yaratıcı ve özgün kısa filmleri keşfedin.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://yourusername.github.io/indiefilms-tr">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #1f2937;
            --accent-color: #3b82f6;
            --text-primary: #111827;
            --text-secondary: #6b7280;
            --bg-primary: #ffffff;
            --bg-secondary: #f9fafb;
            --border-color: #e5e7eb;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        [data-theme="dark"] {
            --primary-color: #f9fafb;
            --accent-color: #60a5fa;
            --text-primary: #f9fafb;
            --text-secondary: #d1d5db;
            --bg-primary: #111827;
            --bg-secondary: #1f2937;
            --border-color: #374151;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            transition: var(--transition);
        }

        .header {
            background-color: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--accent-color);
            text-decoration: none;
        }

        .theme-toggle {
            background: var(--bg-secondary);
            border: 2px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 0.5rem;
            cursor: pointer;
            transition: var(--transition);
            position: fixed;
            top: 1rem;
            left: 1rem;
            z-index: 1000;
        }

        .theme-toggle:hover {
            border-color: var(--accent-color);
        }

        .search-filter-section {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .search-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid var(--border-color);
            border-radius: 0.5rem;
            background-color: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 1rem;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--accent-color);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .filter-tag {
            padding: 0.5rem 1rem;
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            border-radius: 2rem;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.875rem;
        }

        .filter-tag:hover,
        .filter-tag.active {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .video-card {
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            overflow: hidden;
            transition: var(--transition);
            cursor: pointer;
        }

        .video-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow);
        }

        .video-thumbnail {
            width: 100%;
            height: 200px;
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            position: relative;
        }

        .play-button {
            position: absolute;
            background: rgba(0, 0, 0, 0.7);
            border: none;
            border-radius: 50%;
            width: 4rem;
            height: 4rem;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .play-button:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }

        .video-info {
            padding: 1rem;
        }

        .video-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .video-description {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-bottom: 1rem;
        }

        .video-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.25rem;
            margin-bottom: 1rem;
        }

        .video-tag {
            background-color: var(--accent-color);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
        }

        .video-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-button {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            background: none;
            color: var(--text-secondary);
            cursor: pointer;
            transition: var(--transition);
            flex: 1;
            font-size: 0.875rem;
        }

        .action-button:hover {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }

        .action-button.active {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            padding: 1rem;
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            max-width: 900px;
            width: 100%;
            background: var(--bg-primary);
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .modal-header {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .close-button {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-secondary);
        }

        .video-player {
            width: 100%;
            height: auto;
            max-height: 500px;
        }

        .modal-info {
            padding: 1rem;
        }

        .video-controls {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .control-button {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            background: var(--bg-secondary);
            color: var(--text-primary);
            cursor: pointer;
        }

        .control-button:hover {
            background: var(--accent-color);
            color: white;
        }

        .readme-section {
            max-width: 1200px;
            margin: 4rem auto 2rem;
            padding: 0 1rem;
        }

        .readme-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 2rem;
        }

        .readme-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .readme-steps {
            list-style: none;
            counter-reset: step-counter;
        }

        .readme-steps li {
            counter-increment: step-counter;
            margin-bottom: 1rem;
            padding-left: 2rem;
            position: relative;
        }

        .readme-steps li::before {
            content: counter(step-counter);
            position: absolute;
            left: 0;
            top: 0;
            background: var(--accent-color);
            color: white;
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .footer {
            text-align: center;
            padding: 2rem 1rem;
            color: var(--text-secondary);
            border-top: 1px solid var(--border-color);
            margin-top: 4rem;
        }

        @media (max-width: 768px) {
            .video-grid {
                grid-template-columns: 1fr;
            }
            .modal {
                padding: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" id="themeToggle">
        <span id="themeIcon">🌙</span>
    </button>

    <header class="header">
        <div class="header-content">
            <a href="#" class="logo">IndieFilms TR</a>
            <span style="color: var(--text-secondary);">Bağımsız Kısa Filmler</span>
        </div>
    </header>

    <section class="search-filter-section">
        <div class="search-container">
            <input type="search" class="search-input" id="searchInput" placeholder="Film ara...">
            <span class="search-icon">🔍</span>
        </div>
        
        <div class="filter-tags">
            <button class="filter-tag active" data-category="all">Tümü</button>
            <button class="filter-tag" data-category="drama">Kısa Dram</button>
            <button class="filter-tag" data-category="experimental">Deneysel</button>
            <button class="filter-tag" data-category="animation">Animasyon</button>
            <button class="filter-tag" data-category="comedy">Komedi</button>
            <button class="filter-tag" data-category="documentary">Belgesel</button>
        </div>
    </section>

    <main class="video-grid" id="videoGrid"></main>

    <div class="modal" id="videoModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Film Başlığı</h2>
                <button class="close-button" id="closeModal">&times;</button>
            </div>
            <video class="video-player" id="videoPlayer" controls>
                <source src="" type="video/mp4">
                <track kind="subtitles" src="data:text/vtt;base64,V0VCVlRUCgowMDowMDowMC4wMDAgLS0+IDAwOjAwOjA1LjAwMApTZWxhbSEgQnUgYmlyIG9ybmVrIGFsdHlhesSxZMSxci4KCjAwOjAwOjA1LjAwMCAtLT4gMDA6MDA6MTAuMDAwCkJ1IGZpbG0gYmHFn2xhbcSxxZ90xLEuCgowMDowMDoxMC4wMDAgLS0+IDAwOjAwOjE1LjAwMApJeWkgc2V5cmVkZXIh" srclang="tr" label="Türkçe" default>
            </video>
            <div class="modal-info">
                <p id="videoDescription">Film açıklaması buraya gelecek.</p>
                <div class="video-controls">
                    <button class="control-button" id="toggleSubtitles">Altyazı Aç/Kapat</button>
                    <button class="control-button" id="fullscreenBtn">Tam Ekran</button>
                </div>
            </div>
        </div>
    </div>

    <section class="readme-section">
        <div class="readme-card">
            <h2 class="readme-title">🚀 GitHub Pages'e Nasıl Yüklenir?</h2>
            <ol class="readme-steps">
                <li>GitHub hesabınızda yeni bir repository oluşturun (örn: indiefilms-tr)</li>
                <li>Bu index.html dosyasını repository'nize yükleyin</li>
                <li>Repository ayarlarından Pages bölümüne gidin</li>
                <li>Source olarak "Deploy from a branch" seçin</li>
                <li>Branch olarak "main" ve folder olarak "/ (root)" seçin</li>
                <li>Save butonuna tıklayın ve sitenizin URL'sini bekleyin</li>
            </ol>
        </div>
    </section>

    <footer class="footer">
        <p>&copy; 2024 IndieFilms TR. Bağımsız kısa filmleri destekliyoruz.</p>
        <p><strong>KULLANIM:</strong> GitHub repository'ye index.html olarak ekle, Pages aktif et.</p>
    </footer>

    <script>
        const videoData = [
            {
                id: 1,
                title: "Kayıp Anılar",
                description: "Bir adamın geçmişiyle yüzleşme hikayesi. Derin ve etkileyici bir kısa dram filmi.",
                category: "drama",
                tags: ["dram", "psikolojik", "2024"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%23667eea'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='20' fill='white' text-anchor='middle'%3EKayıp Anılar%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                duration: "12:30"
            },
            {
                id: 2,
                title: "Renklerin Dansı",
                description: "Soyut sanat ve müziğin buluştuğu deneysel bir animasyon filmi.",
                category: "animation",
                tags: ["animasyon", "deneysel", "sanat"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%23764ba2'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='20' fill='white' text-anchor='middle'%3ERenklerin Dansı%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
                duration: "8:45"
            },
            {
                id: 3,
                title: "Gülmece",
                description: "Günlük hayatın komik yanlarını ele alan eğlenceli bir kısa film.",
                category: "comedy",
                tags: ["komedi", "mizah", "gündelik"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%23f093fb'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='20' fill='white' text-anchor='middle'%3EGülmece%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
                duration: "15:22"
            },
            {
                id: 4,
                title: "Sessizliğin Sesi",
                description: "İşitme engelli bir müzisyenin hayat mücadelesi. Dokunaklı bir belgesel.",
                category: "documentary",
                tags: ["belgesel", "sosyal", "müzik"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%2343cea2'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='18' fill='white' text-anchor='middle'%3ESessizliğin Sesi%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",
                duration: "22:10"
            },
            {
                id: 5,
                title: "Zaman Kırılması",
                description: "Zamanın doğrusal olmadığını keşfeden bir bilim insanının hikayesi.",
                category: "experimental",
                tags: ["sci-fi", "deneysel", "zaman"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%23185a9d'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='18' fill='white' text-anchor='middle'%3EZaman Kırılması%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
                duration: "18:33"
            },
            {
                id: 6,
                title: "Son Mektup",
                description: "Aşk, kayıp ve umut üzerine poetik bir kısa film.",
                category: "drama",
                tags: ["romantik", "dram", "şiir"],
                thumbnail: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='225' viewBox='0 0 400 225'%3E%3Crect width='400' height='225' fill='%23ff6b6b'/%3E%3Ctext x='200' y='120' font-family='Arial' font-size='20' fill='white' text-anchor='middle'%3ESon Mektup%3C/text%3E%3C/svg%3E",
                videoUrl: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/VolkswagenGTIReview.mp4",
                duration: "14:20"
            }
        ];

        let currentFilter = 'all';
        let searchTerm = '';
        let favorites = JSON.parse(localStorage.getItem('indiefilms-favorites') || '[]');
        let watchlist = JSON.parse(localStorage.getItem('indiefilms-watchlist') || '[]');

        const themeToggle = document.getElementById('themeToggle');
        const themeIcon = document.getElementById('themeIcon');
        const searchInput = document.getElementById('searchInput');
        const videoGrid = document.getElementById('videoGrid');
        const videoModal = document.getElementById('videoModal');
        const modalTitle = document.getElementById('modalTitle');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoDescription = document.getElementById('videoDescription');
        const closeModal = document.getElementById('closeModal');
        const toggleSubtitles = document.getElementById('toggleSubtitles');
        const fullscreenBtn = document.getElementById('fullscreenBtn');

        function init() {
            setupEventListeners();
            loadTheme();
            renderVideos();
        }

        function setupEventListeners() {
            themeToggle.addEventListener('click', toggleTheme);
            searchInput.addEventListener('input', handleSearch);
            closeModal.addEventListener('click', closeVideoModal);
            toggleSubtitles.addEventListener('click', handleSubtitles);
            fullscreenBtn.addEventListener('click', handleFullscreen);

            document.querySelectorAll('.filter-tag').forEach(tag => {
                tag.addEventListener('click', handleFilterClick);
            });

            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && videoModal.classList.contains('active')) {
                    closeVideoModal();
                }
            });

            videoModal.addEventListener('click', (e) => {
                if (e.target === videoModal) {
                    closeVideoModal();
                }
            });
        }

        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            themeIcon.textContent = newTheme === 'dark' ? '☀️' : '🌙';
            localStorage.setItem('indiefilms-theme', newTheme);
        }

        function loadTheme() {
            const savedTheme = localStorage.getItem('indiefilms-theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            themeIcon.textContent = savedTheme === 'dark' ? '☀️' : '🌙';
        }

        function handleSearch(e) {
            searchTerm = e.target.value.toLowerCase();
            renderVideos();
        }

        function handleFilterClick(e) {
            document.querySelectorAll('.filter-tag').forEach(tag => {
                tag.classList.remove('active');
            });
            e.target.classList.add('active');
            currentFilter = e.target.getAttribute('data-category');
            renderVideos();
        }

        function renderVideos() {
            const filteredVideos = videoData.filter(video => {
                const matchesCategory = currentFilter === 'all' || video.category === currentFilter;
                const matchesSearch = video.title.toLowerCase().includes(searchTerm) || 
                                    video.description.toLowerCase().includes(searchTerm) ||
                                    video.tags.some(tag => tag.toLowerCase().includes(searchTerm));
                return matchesCategory && matchesSearch;
            });

            videoGrid.innerHTML = filteredVideos.map(video => `
                <div class="video-card" onclick="openVideoModal(${video.id})">
                    <div class="video-thumbnail" style="background-image: url('${video.thumbnail}'); background-size: cover;">
                        <button class="play-button" onclick="event.stopPropagation(); openVideoModal(${video.id})">▶</button>
                    </div>
                    <div class="video-info">
                        <h3 class="video-title">${video.title}</h3>
                        <p class="video-description">${video.description}</p>
                        <div class="video-tags">
                            ${video.tags.map(tag => `<span class="video-tag">${tag}</span>`).join('')}
                        </div>
                        <div class="video-actions">
                            <button class="action-button ${favorites.includes(video.id) ? 'active' : ''}" 
                                    onclick="event.stopPropagation(); toggleFavorite(${video.id})">
                                ❤ Favori
                            </button>
                            <button class="action-button ${watchlist.includes(video.id) ? 'active' : ''}" 
                                    onclick="event.stopPropagation(); toggleWatchlist(${video.id})">
                                📝 Liste
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function openVideoModal(videoId) {
            const video = videoData.find(v => v.id === videoId);
            if (!video) return;

            modalTitle.textContent = video.title;
            videoDescription.textContent = video.description;
            videoPlayer.querySelector('source').src = video.videoUrl;
            videoPlayer.load();
            
            videoModal.classList.add('active');
        }

        function closeVideoModal() {
            videoModal.classList.remove('active');
            videoPlayer.pause();
            videoPlayer.currentTime = 0;
        }

        function toggleFavorite(videoId) {
            const index = favorites.indexOf(videoId);
            if (index > -1) {
                favorites.splice(index, 1);
            } else {
                favorites.push(videoId);
            }
            localStorage.setItem('indiefilms-favorites', JSON.stringify(favorites));
            renderVideos();
        }

        function toggleWatchlist(videoId) {
            const index = watchlist.indexOf(videoId);
            if (index > -1) {
                watchlist.splice(index, 1);
            } else {
                watchlist.push(videoId);
            }
            localStorage.setItem('indiefilms-watchlist', JSON.stringify(watchlist));
            renderVideos();
        }

        function handleSubtitles() {
            const track = videoPlayer.querySelector('track');
            if (track) {
                track.mode = track.mode === 'showing' ? 'hidden' : 'showing';
            }
        }

        function handleFullscreen() {
            if (videoPlayer.requestFullscreen) {
                videoPlayer.requestFullscreen();
            } else if (videoPlayer.webkitRequestFullscreen) {
                videoPlayer.webkitRequestFullscreen();
            } else if (videoPlayer.msRequestFullscreen) {
                videoPlayer.msRequestFullscreen();
            }
        }

        init();
    </script>
</body>
</html>
